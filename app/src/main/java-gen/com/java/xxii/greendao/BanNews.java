package com.java.xxii.greendao;

import com.java.xxii.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BAN_NEWS.
 */
public class BanNews {

    private Long id;
    private long banCollection_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BanNewsDao myDao;

    private BanCollection banCollection;
    private Long banCollection__resolvedKey;


    public BanNews() {
    }

    public BanNews(Long id) {
        this.id = id;
    }

    public BanNews(Long id, long banCollection_id) {
        this.id = id;
        this.banCollection_id = banCollection_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBanNewsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getBanCollection_id() {
        return banCollection_id;
    }

    public void setBanCollection_id(long banCollection_id) {
        this.banCollection_id = banCollection_id;
    }

    /** To-one relationship, resolved on first access. */
    public BanCollection getBanCollection() {
        long __key = this.banCollection_id;
        if (banCollection__resolvedKey == null || !banCollection__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BanCollectionDao targetDao = daoSession.getBanCollectionDao();
            BanCollection banCollectionNew = targetDao.load(__key);
            synchronized (this) {
                banCollection = banCollectionNew;
            	banCollection__resolvedKey = __key;
            }
        }
        return banCollection;
    }

    public void setBanCollection(BanCollection banCollection) {
        if (banCollection == null) {
            throw new DaoException("To-one property 'banCollection_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.banCollection = banCollection;
            banCollection_id = banCollection.getId();
            banCollection__resolvedKey = banCollection_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
